/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Format,
  HTTPValidationError,
  Logout,
  Meeting,
  MeetingChangesResponse,
  NawsCode,
  NawsCodeCreate,
  RootServer,
  RootServerCreate,
  RootServerUpdate,
  ServiceBody,
  Snapshot,
  Token,
  User,
  UserCreate,
} from '../models';
import {
    FormatFromJSON,
    FormatToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    LogoutFromJSON,
    LogoutToJSON,
    MeetingFromJSON,
    MeetingToJSON,
    MeetingChangesResponseFromJSON,
    MeetingChangesResponseToJSON,
    NawsCodeFromJSON,
    NawsCodeToJSON,
    NawsCodeCreateFromJSON,
    NawsCodeCreateToJSON,
    RootServerFromJSON,
    RootServerToJSON,
    RootServerCreateFromJSON,
    RootServerCreateToJSON,
    RootServerUpdateFromJSON,
    RootServerUpdateToJSON,
    ServiceBodyFromJSON,
    ServiceBodyToJSON,
    SnapshotFromJSON,
    SnapshotToJSON,
    TokenFromJSON,
    TokenToJSON,
    UserFromJSON,
    UserToJSON,
    UserCreateFromJSON,
    UserCreateToJSON,
} from '../models';

export interface BatchUpdateMeetingNawsCodesRootserversRootServerIdMeetingsNawscodesPatchRequest {
    rootServerId: number;
    nawsCodeCreate: Array<NawsCodeCreate>;
}

export interface CreateAuthTokenTokenPostRequest {
    grantType: string;
    username?: string;
    password?: string;
    refreshToken?: string;
    scope?: string;
    clientId?: string;
    clientSecret?: string;
}

export interface CreateFormatNawsCodeRootserversRootServerIdFormatsNawscodesPostRequest {
    rootServerId: number;
    nawsCodeCreate: NawsCodeCreate;
}

export interface CreateMeetingNawsCodeRootserversRootServerIdMeetingsNawscodesPostRequest {
    rootServerId: number;
    nawsCodeCreate: NawsCodeCreate;
}

export interface CreateRootServerRootserversPostRequest {
    rootServerCreate: RootServerCreate;
}

export interface CreateServiceBodyNawsCodeRootserversRootServerIdServicebodiesNawscodesPostRequest {
    rootServerId: number;
    nawsCodeCreate: NawsCodeCreate;
}

export interface CreateUserUsersPostRequest {
    userCreate: UserCreate;
}

export interface DeleteFormatNawsCodeRootserversRootServerIdFormatsNawscodesBmltIdDeleteRequest {
    rootServerId: number;
    bmltId: number;
}

export interface DeleteMeetingNawsCodeRootserversRootServerIdMeetingsNawscodesBmltIdDeleteRequest {
    rootServerId: number;
    bmltId: number;
}

export interface DeleteRootServerRootserversRootServerIdDeleteRequest {
    rootServerId: number;
}

export interface DeleteServiceBodyNawsCodeRootserversRootServerIdServicebodiesNawscodesBmltIdDeleteRequest {
    rootServerId: number;
    bmltId: number;
}

export interface GetFormatNawsCodeRootserversRootServerIdFormatsNawscodesBmltIdGetRequest {
    rootServerId: number;
    bmltId: number;
}

export interface GetMeetingNawsCodeRootserversRootServerIdMeetingsNawscodesBmltIdGetRequest {
    rootServerId: number;
    bmltId: number;
}

export interface GetRootServerRootserversRootServerIdGetRequest {
    rootServerId: number;
}

export interface GetServerSnapshotRootserversRootServerIdSnapshotsDateGetRequest {
    rootServerId: number;
    date: Date;
}

export interface GetServiceBodyNawsCodeRootserversRootServerIdServicebodiesNawscodesBmltIdGetRequest {
    rootServerId: number;
    bmltId: number;
}

export interface ListMeetingChangesRootserversRootServerIdMeetingsChangesGetRequest {
    rootServerId: number;
    startDate: Date;
    endDate?: Date;
    serviceBodyBmltIds?: Array<number>;
    excludeWorldIdUpdates?: boolean;
}

export interface ListServerFormatNawsCodesRootserversRootServerIdFormatsNawscodesGetRequest {
    rootServerId: number;
}

export interface ListServerMeetingNawsCodesRootserversRootServerIdMeetingsNawscodesGetRequest {
    rootServerId: number;
}

export interface ListServerServiceBodyNawsCodesRootserversRootServerIdServicebodiesNawscodesGetRequest {
    rootServerId: number;
}

export interface ListServerSnapshotsRootserversRootServerIdSnapshotsGetRequest {
    rootServerId: number;
}

export interface ListSnapshotFormatsRootserversRootServerIdSnapshotsDateFormatsGetRequest {
    rootServerId: number;
    date: Date;
}

export interface ListSnapshotMeetingsRootserversRootServerIdSnapshotsDateMeetingsGetRequest {
    rootServerId: number;
    date: Date;
    serviceBodyBmltIds?: Array<number>;
}

export interface ListSnapshotServiceBodiesRootserversRootServerIdSnapshotsDateServicebodiesGetRequest {
    rootServerId: number;
    date: Date;
}

export interface LogoutLogoutPostRequest {
    logout: Logout;
}

export interface UpdateRootServerRootserversRootServerIdPatchRequest {
    rootServerId: number;
    rootServerUpdate: RootServerUpdate;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Batch Update Meeting Naws Codes
     */
    async batchUpdateMeetingNawsCodesRootserversRootServerIdMeetingsNawscodesPatchRaw(requestParameters: BatchUpdateMeetingNawsCodesRootserversRootServerIdMeetingsNawscodesPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.rootServerId === null || requestParameters.rootServerId === undefined) {
            throw new runtime.RequiredError('rootServerId','Required parameter requestParameters.rootServerId was null or undefined when calling batchUpdateMeetingNawsCodesRootserversRootServerIdMeetingsNawscodesPatch.');
        }

        if (requestParameters.nawsCodeCreate === null || requestParameters.nawsCodeCreate === undefined) {
            throw new runtime.RequiredError('nawsCodeCreate','Required parameter requestParameters.nawsCodeCreate was null or undefined when calling batchUpdateMeetingNawsCodesRootserversRootServerIdMeetingsNawscodesPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/rootservers/{root_server_id}/meetings/nawscodes`.replace(`{${"root_server_id"}}`, encodeURIComponent(String(requestParameters.rootServerId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.nawsCodeCreate.map(NawsCodeCreateToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Batch Update Meeting Naws Codes
     */
    async batchUpdateMeetingNawsCodesRootserversRootServerIdMeetingsNawscodesPatch(requestParameters: BatchUpdateMeetingNawsCodesRootserversRootServerIdMeetingsNawscodesPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.batchUpdateMeetingNawsCodesRootserversRootServerIdMeetingsNawscodesPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Create Auth Token
     */
    async createAuthTokenTokenPostRaw(requestParameters: CreateAuthTokenTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.grantType === null || requestParameters.grantType === undefined) {
            throw new runtime.RequiredError('grantType','Required parameter requestParameters.grantType was null or undefined when calling createAuthTokenTokenPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.grantType !== undefined) {
            formParams.append('grant_type', requestParameters.grantType as any);
        }

        if (requestParameters.username !== undefined) {
            formParams.append('username', requestParameters.username as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        if (requestParameters.refreshToken !== undefined) {
            formParams.append('refresh_token', requestParameters.refreshToken as any);
        }

        if (requestParameters.scope !== undefined) {
            formParams.append('scope', requestParameters.scope as any);
        }

        if (requestParameters.clientId !== undefined) {
            formParams.append('client_id', requestParameters.clientId as any);
        }

        if (requestParameters.clientSecret !== undefined) {
            formParams.append('client_secret', requestParameters.clientSecret as any);
        }

        const response = await this.request({
            path: `/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * Create Auth Token
     */
    async createAuthTokenTokenPost(requestParameters: CreateAuthTokenTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token> {
        const response = await this.createAuthTokenTokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Format Naws Code
     */
    async createFormatNawsCodeRootserversRootServerIdFormatsNawscodesPostRaw(requestParameters: CreateFormatNawsCodeRootserversRootServerIdFormatsNawscodesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NawsCode>> {
        if (requestParameters.rootServerId === null || requestParameters.rootServerId === undefined) {
            throw new runtime.RequiredError('rootServerId','Required parameter requestParameters.rootServerId was null or undefined when calling createFormatNawsCodeRootserversRootServerIdFormatsNawscodesPost.');
        }

        if (requestParameters.nawsCodeCreate === null || requestParameters.nawsCodeCreate === undefined) {
            throw new runtime.RequiredError('nawsCodeCreate','Required parameter requestParameters.nawsCodeCreate was null or undefined when calling createFormatNawsCodeRootserversRootServerIdFormatsNawscodesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/rootservers/{root_server_id}/formats/nawscodes`.replace(`{${"root_server_id"}}`, encodeURIComponent(String(requestParameters.rootServerId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NawsCodeCreateToJSON(requestParameters.nawsCodeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NawsCodeFromJSON(jsonValue));
    }

    /**
     * Create Format Naws Code
     */
    async createFormatNawsCodeRootserversRootServerIdFormatsNawscodesPost(requestParameters: CreateFormatNawsCodeRootserversRootServerIdFormatsNawscodesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NawsCode> {
        const response = await this.createFormatNawsCodeRootserversRootServerIdFormatsNawscodesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Meeting Naws Code
     */
    async createMeetingNawsCodeRootserversRootServerIdMeetingsNawscodesPostRaw(requestParameters: CreateMeetingNawsCodeRootserversRootServerIdMeetingsNawscodesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NawsCode>> {
        if (requestParameters.rootServerId === null || requestParameters.rootServerId === undefined) {
            throw new runtime.RequiredError('rootServerId','Required parameter requestParameters.rootServerId was null or undefined when calling createMeetingNawsCodeRootserversRootServerIdMeetingsNawscodesPost.');
        }

        if (requestParameters.nawsCodeCreate === null || requestParameters.nawsCodeCreate === undefined) {
            throw new runtime.RequiredError('nawsCodeCreate','Required parameter requestParameters.nawsCodeCreate was null or undefined when calling createMeetingNawsCodeRootserversRootServerIdMeetingsNawscodesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/rootservers/{root_server_id}/meetings/nawscodes`.replace(`{${"root_server_id"}}`, encodeURIComponent(String(requestParameters.rootServerId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NawsCodeCreateToJSON(requestParameters.nawsCodeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NawsCodeFromJSON(jsonValue));
    }

    /**
     * Create Meeting Naws Code
     */
    async createMeetingNawsCodeRootserversRootServerIdMeetingsNawscodesPost(requestParameters: CreateMeetingNawsCodeRootserversRootServerIdMeetingsNawscodesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NawsCode> {
        const response = await this.createMeetingNawsCodeRootserversRootServerIdMeetingsNawscodesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Root Server
     */
    async createRootServerRootserversPostRaw(requestParameters: CreateRootServerRootserversPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RootServer>> {
        if (requestParameters.rootServerCreate === null || requestParameters.rootServerCreate === undefined) {
            throw new runtime.RequiredError('rootServerCreate','Required parameter requestParameters.rootServerCreate was null or undefined when calling createRootServerRootserversPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/rootservers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RootServerCreateToJSON(requestParameters.rootServerCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RootServerFromJSON(jsonValue));
    }

    /**
     * Create Root Server
     */
    async createRootServerRootserversPost(requestParameters: CreateRootServerRootserversPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RootServer> {
        const response = await this.createRootServerRootserversPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Service Body Naws Code
     */
    async createServiceBodyNawsCodeRootserversRootServerIdServicebodiesNawscodesPostRaw(requestParameters: CreateServiceBodyNawsCodeRootserversRootServerIdServicebodiesNawscodesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NawsCode>> {
        if (requestParameters.rootServerId === null || requestParameters.rootServerId === undefined) {
            throw new runtime.RequiredError('rootServerId','Required parameter requestParameters.rootServerId was null or undefined when calling createServiceBodyNawsCodeRootserversRootServerIdServicebodiesNawscodesPost.');
        }

        if (requestParameters.nawsCodeCreate === null || requestParameters.nawsCodeCreate === undefined) {
            throw new runtime.RequiredError('nawsCodeCreate','Required parameter requestParameters.nawsCodeCreate was null or undefined when calling createServiceBodyNawsCodeRootserversRootServerIdServicebodiesNawscodesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/rootservers/{root_server_id}/servicebodies/nawscodes`.replace(`{${"root_server_id"}}`, encodeURIComponent(String(requestParameters.rootServerId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NawsCodeCreateToJSON(requestParameters.nawsCodeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NawsCodeFromJSON(jsonValue));
    }

    /**
     * Create Service Body Naws Code
     */
    async createServiceBodyNawsCodeRootserversRootServerIdServicebodiesNawscodesPost(requestParameters: CreateServiceBodyNawsCodeRootserversRootServerIdServicebodiesNawscodesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NawsCode> {
        const response = await this.createServiceBodyNawsCodeRootserversRootServerIdServicebodiesNawscodesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create User
     */
    async createUserUsersPostRaw(requestParameters: CreateUserUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.userCreate === null || requestParameters.userCreate === undefined) {
            throw new runtime.RequiredError('userCreate','Required parameter requestParameters.userCreate was null or undefined when calling createUserUsersPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCreateToJSON(requestParameters.userCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Create User
     */
    async createUserUsersPost(requestParameters: CreateUserUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.createUserUsersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Format Naws Code
     */
    async deleteFormatNawsCodeRootserversRootServerIdFormatsNawscodesBmltIdDeleteRaw(requestParameters: DeleteFormatNawsCodeRootserversRootServerIdFormatsNawscodesBmltIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.rootServerId === null || requestParameters.rootServerId === undefined) {
            throw new runtime.RequiredError('rootServerId','Required parameter requestParameters.rootServerId was null or undefined when calling deleteFormatNawsCodeRootserversRootServerIdFormatsNawscodesBmltIdDelete.');
        }

        if (requestParameters.bmltId === null || requestParameters.bmltId === undefined) {
            throw new runtime.RequiredError('bmltId','Required parameter requestParameters.bmltId was null or undefined when calling deleteFormatNawsCodeRootserversRootServerIdFormatsNawscodesBmltIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/rootservers/{root_server_id}/formats/nawscodes/{bmlt_id}`.replace(`{${"root_server_id"}}`, encodeURIComponent(String(requestParameters.rootServerId))).replace(`{${"bmlt_id"}}`, encodeURIComponent(String(requestParameters.bmltId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Format Naws Code
     */
    async deleteFormatNawsCodeRootserversRootServerIdFormatsNawscodesBmltIdDelete(requestParameters: DeleteFormatNawsCodeRootserversRootServerIdFormatsNawscodesBmltIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFormatNawsCodeRootserversRootServerIdFormatsNawscodesBmltIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Meeting Naws Code
     */
    async deleteMeetingNawsCodeRootserversRootServerIdMeetingsNawscodesBmltIdDeleteRaw(requestParameters: DeleteMeetingNawsCodeRootserversRootServerIdMeetingsNawscodesBmltIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.rootServerId === null || requestParameters.rootServerId === undefined) {
            throw new runtime.RequiredError('rootServerId','Required parameter requestParameters.rootServerId was null or undefined when calling deleteMeetingNawsCodeRootserversRootServerIdMeetingsNawscodesBmltIdDelete.');
        }

        if (requestParameters.bmltId === null || requestParameters.bmltId === undefined) {
            throw new runtime.RequiredError('bmltId','Required parameter requestParameters.bmltId was null or undefined when calling deleteMeetingNawsCodeRootserversRootServerIdMeetingsNawscodesBmltIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/rootservers/{root_server_id}/meetings/nawscodes/{bmlt_id}`.replace(`{${"root_server_id"}}`, encodeURIComponent(String(requestParameters.rootServerId))).replace(`{${"bmlt_id"}}`, encodeURIComponent(String(requestParameters.bmltId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Meeting Naws Code
     */
    async deleteMeetingNawsCodeRootserversRootServerIdMeetingsNawscodesBmltIdDelete(requestParameters: DeleteMeetingNawsCodeRootserversRootServerIdMeetingsNawscodesBmltIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMeetingNawsCodeRootserversRootServerIdMeetingsNawscodesBmltIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Root Server
     */
    async deleteRootServerRootserversRootServerIdDeleteRaw(requestParameters: DeleteRootServerRootserversRootServerIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.rootServerId === null || requestParameters.rootServerId === undefined) {
            throw new runtime.RequiredError('rootServerId','Required parameter requestParameters.rootServerId was null or undefined when calling deleteRootServerRootserversRootServerIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/rootservers/{root_server_id}`.replace(`{${"root_server_id"}}`, encodeURIComponent(String(requestParameters.rootServerId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Root Server
     */
    async deleteRootServerRootserversRootServerIdDelete(requestParameters: DeleteRootServerRootserversRootServerIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRootServerRootserversRootServerIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Service Body Naws Code
     */
    async deleteServiceBodyNawsCodeRootserversRootServerIdServicebodiesNawscodesBmltIdDeleteRaw(requestParameters: DeleteServiceBodyNawsCodeRootserversRootServerIdServicebodiesNawscodesBmltIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.rootServerId === null || requestParameters.rootServerId === undefined) {
            throw new runtime.RequiredError('rootServerId','Required parameter requestParameters.rootServerId was null or undefined when calling deleteServiceBodyNawsCodeRootserversRootServerIdServicebodiesNawscodesBmltIdDelete.');
        }

        if (requestParameters.bmltId === null || requestParameters.bmltId === undefined) {
            throw new runtime.RequiredError('bmltId','Required parameter requestParameters.bmltId was null or undefined when calling deleteServiceBodyNawsCodeRootserversRootServerIdServicebodiesNawscodesBmltIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/rootservers/{root_server_id}/servicebodies/nawscodes/{bmlt_id}`.replace(`{${"root_server_id"}}`, encodeURIComponent(String(requestParameters.rootServerId))).replace(`{${"bmlt_id"}}`, encodeURIComponent(String(requestParameters.bmltId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Service Body Naws Code
     */
    async deleteServiceBodyNawsCodeRootserversRootServerIdServicebodiesNawscodesBmltIdDelete(requestParameters: DeleteServiceBodyNawsCodeRootserversRootServerIdServicebodiesNawscodesBmltIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteServiceBodyNawsCodeRootserversRootServerIdServicebodiesNawscodesBmltIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get Format Naws Code
     */
    async getFormatNawsCodeRootserversRootServerIdFormatsNawscodesBmltIdGetRaw(requestParameters: GetFormatNawsCodeRootserversRootServerIdFormatsNawscodesBmltIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NawsCode>> {
        if (requestParameters.rootServerId === null || requestParameters.rootServerId === undefined) {
            throw new runtime.RequiredError('rootServerId','Required parameter requestParameters.rootServerId was null or undefined when calling getFormatNawsCodeRootserversRootServerIdFormatsNawscodesBmltIdGet.');
        }

        if (requestParameters.bmltId === null || requestParameters.bmltId === undefined) {
            throw new runtime.RequiredError('bmltId','Required parameter requestParameters.bmltId was null or undefined when calling getFormatNawsCodeRootserversRootServerIdFormatsNawscodesBmltIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/rootservers/{root_server_id}/formats/nawscodes/{bmlt_id}`.replace(`{${"root_server_id"}}`, encodeURIComponent(String(requestParameters.rootServerId))).replace(`{${"bmlt_id"}}`, encodeURIComponent(String(requestParameters.bmltId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NawsCodeFromJSON(jsonValue));
    }

    /**
     * Get Format Naws Code
     */
    async getFormatNawsCodeRootserversRootServerIdFormatsNawscodesBmltIdGet(requestParameters: GetFormatNawsCodeRootserversRootServerIdFormatsNawscodesBmltIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NawsCode> {
        const response = await this.getFormatNawsCodeRootserversRootServerIdFormatsNawscodesBmltIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Meeting Naws Code
     */
    async getMeetingNawsCodeRootserversRootServerIdMeetingsNawscodesBmltIdGetRaw(requestParameters: GetMeetingNawsCodeRootserversRootServerIdMeetingsNawscodesBmltIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NawsCode>> {
        if (requestParameters.rootServerId === null || requestParameters.rootServerId === undefined) {
            throw new runtime.RequiredError('rootServerId','Required parameter requestParameters.rootServerId was null or undefined when calling getMeetingNawsCodeRootserversRootServerIdMeetingsNawscodesBmltIdGet.');
        }

        if (requestParameters.bmltId === null || requestParameters.bmltId === undefined) {
            throw new runtime.RequiredError('bmltId','Required parameter requestParameters.bmltId was null or undefined when calling getMeetingNawsCodeRootserversRootServerIdMeetingsNawscodesBmltIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/rootservers/{root_server_id}/meetings/nawscodes/{bmlt_id}`.replace(`{${"root_server_id"}}`, encodeURIComponent(String(requestParameters.rootServerId))).replace(`{${"bmlt_id"}}`, encodeURIComponent(String(requestParameters.bmltId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NawsCodeFromJSON(jsonValue));
    }

    /**
     * Get Meeting Naws Code
     */
    async getMeetingNawsCodeRootserversRootServerIdMeetingsNawscodesBmltIdGet(requestParameters: GetMeetingNawsCodeRootserversRootServerIdMeetingsNawscodesBmltIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NawsCode> {
        const response = await this.getMeetingNawsCodeRootserversRootServerIdMeetingsNawscodesBmltIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Root Server
     */
    async getRootServerRootserversRootServerIdGetRaw(requestParameters: GetRootServerRootserversRootServerIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RootServer>> {
        if (requestParameters.rootServerId === null || requestParameters.rootServerId === undefined) {
            throw new runtime.RequiredError('rootServerId','Required parameter requestParameters.rootServerId was null or undefined when calling getRootServerRootserversRootServerIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/rootservers/{root_server_id}`.replace(`{${"root_server_id"}}`, encodeURIComponent(String(requestParameters.rootServerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RootServerFromJSON(jsonValue));
    }

    /**
     * Get Root Server
     */
    async getRootServerRootserversRootServerIdGet(requestParameters: GetRootServerRootserversRootServerIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RootServer> {
        const response = await this.getRootServerRootserversRootServerIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Server Snapshot
     */
    async getServerSnapshotRootserversRootServerIdSnapshotsDateGetRaw(requestParameters: GetServerSnapshotRootserversRootServerIdSnapshotsDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Snapshot>> {
        if (requestParameters.rootServerId === null || requestParameters.rootServerId === undefined) {
            throw new runtime.RequiredError('rootServerId','Required parameter requestParameters.rootServerId was null or undefined when calling getServerSnapshotRootserversRootServerIdSnapshotsDateGet.');
        }

        if (requestParameters.date === null || requestParameters.date === undefined) {
            throw new runtime.RequiredError('date','Required parameter requestParameters.date was null or undefined when calling getServerSnapshotRootserversRootServerIdSnapshotsDateGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/rootservers/{root_server_id}/snapshots/{date}`.replace(`{${"root_server_id"}}`, encodeURIComponent(String(requestParameters.rootServerId))).replace(`{${"date"}}`, encodeURIComponent(String(requestParameters.date))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SnapshotFromJSON(jsonValue));
    }

    /**
     * Get Server Snapshot
     */
    async getServerSnapshotRootserversRootServerIdSnapshotsDateGet(requestParameters: GetServerSnapshotRootserversRootServerIdSnapshotsDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Snapshot> {
        const response = await this.getServerSnapshotRootserversRootServerIdSnapshotsDateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Service Body Naws Code
     */
    async getServiceBodyNawsCodeRootserversRootServerIdServicebodiesNawscodesBmltIdGetRaw(requestParameters: GetServiceBodyNawsCodeRootserversRootServerIdServicebodiesNawscodesBmltIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NawsCode>> {
        if (requestParameters.rootServerId === null || requestParameters.rootServerId === undefined) {
            throw new runtime.RequiredError('rootServerId','Required parameter requestParameters.rootServerId was null or undefined when calling getServiceBodyNawsCodeRootserversRootServerIdServicebodiesNawscodesBmltIdGet.');
        }

        if (requestParameters.bmltId === null || requestParameters.bmltId === undefined) {
            throw new runtime.RequiredError('bmltId','Required parameter requestParameters.bmltId was null or undefined when calling getServiceBodyNawsCodeRootserversRootServerIdServicebodiesNawscodesBmltIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/rootservers/{root_server_id}/servicebodies/nawscodes/{bmlt_id}`.replace(`{${"root_server_id"}}`, encodeURIComponent(String(requestParameters.rootServerId))).replace(`{${"bmlt_id"}}`, encodeURIComponent(String(requestParameters.bmltId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NawsCodeFromJSON(jsonValue));
    }

    /**
     * Get Service Body Naws Code
     */
    async getServiceBodyNawsCodeRootserversRootServerIdServicebodiesNawscodesBmltIdGet(requestParameters: GetServiceBodyNawsCodeRootserversRootServerIdServicebodiesNawscodesBmltIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NawsCode> {
        const response = await this.getServiceBodyNawsCodeRootserversRootServerIdServicebodiesNawscodesBmltIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Format Naws Codes
     */
    async listFormatNawsCodesFormatsNawscodesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NawsCode>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/formats/nawscodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NawsCodeFromJSON));
    }

    /**
     * List Format Naws Codes
     */
    async listFormatNawsCodesFormatsNawscodesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NawsCode>> {
        const response = await this.listFormatNawsCodesFormatsNawscodesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List Meeting Changes
     */
    async listMeetingChangesRootserversRootServerIdMeetingsChangesGetRaw(requestParameters: ListMeetingChangesRootserversRootServerIdMeetingsChangesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MeetingChangesResponse>> {
        if (requestParameters.rootServerId === null || requestParameters.rootServerId === undefined) {
            throw new runtime.RequiredError('rootServerId','Required parameter requestParameters.rootServerId was null or undefined when calling listMeetingChangesRootserversRootServerIdMeetingsChangesGet.');
        }

        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling listMeetingChangesRootserversRootServerIdMeetingsChangesGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['start_date'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['end_date'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.serviceBodyBmltIds) {
            queryParameters['service_body_bmlt_ids'] = requestParameters.serviceBodyBmltIds;
        }

        if (requestParameters.excludeWorldIdUpdates !== undefined) {
            queryParameters['exclude_world_id_updates'] = requestParameters.excludeWorldIdUpdates;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/rootservers/{root_server_id}/meetings/changes`.replace(`{${"root_server_id"}}`, encodeURIComponent(String(requestParameters.rootServerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MeetingChangesResponseFromJSON(jsonValue));
    }

    /**
     * List Meeting Changes
     */
    async listMeetingChangesRootserversRootServerIdMeetingsChangesGet(requestParameters: ListMeetingChangesRootserversRootServerIdMeetingsChangesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MeetingChangesResponse> {
        const response = await this.listMeetingChangesRootserversRootServerIdMeetingsChangesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Meeting Naws Codes
     */
    async listMeetingNawsCodesMeetingsNawscodesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NawsCode>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/meetings/nawscodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NawsCodeFromJSON));
    }

    /**
     * List Meeting Naws Codes
     */
    async listMeetingNawsCodesMeetingsNawscodesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NawsCode>> {
        const response = await this.listMeetingNawsCodesMeetingsNawscodesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List Root Servers
     */
    async listRootServersRootserversGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RootServer>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/rootservers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RootServerFromJSON));
    }

    /**
     * List Root Servers
     */
    async listRootServersRootserversGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RootServer>> {
        const response = await this.listRootServersRootserversGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List Server Format Naws Codes
     */
    async listServerFormatNawsCodesRootserversRootServerIdFormatsNawscodesGetRaw(requestParameters: ListServerFormatNawsCodesRootserversRootServerIdFormatsNawscodesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NawsCode>>> {
        if (requestParameters.rootServerId === null || requestParameters.rootServerId === undefined) {
            throw new runtime.RequiredError('rootServerId','Required parameter requestParameters.rootServerId was null or undefined when calling listServerFormatNawsCodesRootserversRootServerIdFormatsNawscodesGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/rootservers/{root_server_id}/formats/nawscodes`.replace(`{${"root_server_id"}}`, encodeURIComponent(String(requestParameters.rootServerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NawsCodeFromJSON));
    }

    /**
     * List Server Format Naws Codes
     */
    async listServerFormatNawsCodesRootserversRootServerIdFormatsNawscodesGet(requestParameters: ListServerFormatNawsCodesRootserversRootServerIdFormatsNawscodesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NawsCode>> {
        const response = await this.listServerFormatNawsCodesRootserversRootServerIdFormatsNawscodesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Server Meeting Naws Codes
     */
    async listServerMeetingNawsCodesRootserversRootServerIdMeetingsNawscodesGetRaw(requestParameters: ListServerMeetingNawsCodesRootserversRootServerIdMeetingsNawscodesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NawsCode>>> {
        if (requestParameters.rootServerId === null || requestParameters.rootServerId === undefined) {
            throw new runtime.RequiredError('rootServerId','Required parameter requestParameters.rootServerId was null or undefined when calling listServerMeetingNawsCodesRootserversRootServerIdMeetingsNawscodesGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/rootservers/{root_server_id}/meetings/nawscodes`.replace(`{${"root_server_id"}}`, encodeURIComponent(String(requestParameters.rootServerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NawsCodeFromJSON));
    }

    /**
     * List Server Meeting Naws Codes
     */
    async listServerMeetingNawsCodesRootserversRootServerIdMeetingsNawscodesGet(requestParameters: ListServerMeetingNawsCodesRootserversRootServerIdMeetingsNawscodesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NawsCode>> {
        const response = await this.listServerMeetingNawsCodesRootserversRootServerIdMeetingsNawscodesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Server Service Body Naws Codes
     */
    async listServerServiceBodyNawsCodesRootserversRootServerIdServicebodiesNawscodesGetRaw(requestParameters: ListServerServiceBodyNawsCodesRootserversRootServerIdServicebodiesNawscodesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NawsCode>>> {
        if (requestParameters.rootServerId === null || requestParameters.rootServerId === undefined) {
            throw new runtime.RequiredError('rootServerId','Required parameter requestParameters.rootServerId was null or undefined when calling listServerServiceBodyNawsCodesRootserversRootServerIdServicebodiesNawscodesGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/rootservers/{root_server_id}/servicebodies/nawscodes`.replace(`{${"root_server_id"}}`, encodeURIComponent(String(requestParameters.rootServerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NawsCodeFromJSON));
    }

    /**
     * List Server Service Body Naws Codes
     */
    async listServerServiceBodyNawsCodesRootserversRootServerIdServicebodiesNawscodesGet(requestParameters: ListServerServiceBodyNawsCodesRootserversRootServerIdServicebodiesNawscodesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NawsCode>> {
        const response = await this.listServerServiceBodyNawsCodesRootserversRootServerIdServicebodiesNawscodesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Server Snapshots
     */
    async listServerSnapshotsRootserversRootServerIdSnapshotsGetRaw(requestParameters: ListServerSnapshotsRootserversRootServerIdSnapshotsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Snapshot>>> {
        if (requestParameters.rootServerId === null || requestParameters.rootServerId === undefined) {
            throw new runtime.RequiredError('rootServerId','Required parameter requestParameters.rootServerId was null or undefined when calling listServerSnapshotsRootserversRootServerIdSnapshotsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/rootservers/{root_server_id}/snapshots`.replace(`{${"root_server_id"}}`, encodeURIComponent(String(requestParameters.rootServerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SnapshotFromJSON));
    }

    /**
     * List Server Snapshots
     */
    async listServerSnapshotsRootserversRootServerIdSnapshotsGet(requestParameters: ListServerSnapshotsRootserversRootServerIdSnapshotsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Snapshot>> {
        const response = await this.listServerSnapshotsRootserversRootServerIdSnapshotsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Service Body Naws Codes
     */
    async listServiceBodyNawsCodesServicebodiesNawscodesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NawsCode>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/servicebodies/nawscodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NawsCodeFromJSON));
    }

    /**
     * List Service Body Naws Codes
     */
    async listServiceBodyNawsCodesServicebodiesNawscodesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NawsCode>> {
        const response = await this.listServiceBodyNawsCodesServicebodiesNawscodesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List Snapshot Formats
     */
    async listSnapshotFormatsRootserversRootServerIdSnapshotsDateFormatsGetRaw(requestParameters: ListSnapshotFormatsRootserversRootServerIdSnapshotsDateFormatsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Format>>> {
        if (requestParameters.rootServerId === null || requestParameters.rootServerId === undefined) {
            throw new runtime.RequiredError('rootServerId','Required parameter requestParameters.rootServerId was null or undefined when calling listSnapshotFormatsRootserversRootServerIdSnapshotsDateFormatsGet.');
        }

        if (requestParameters.date === null || requestParameters.date === undefined) {
            throw new runtime.RequiredError('date','Required parameter requestParameters.date was null or undefined when calling listSnapshotFormatsRootserversRootServerIdSnapshotsDateFormatsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/rootservers/{root_server_id}/snapshots/{date}/formats`.replace(`{${"root_server_id"}}`, encodeURIComponent(String(requestParameters.rootServerId))).replace(`{${"date"}}`, encodeURIComponent(String(requestParameters.date))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FormatFromJSON));
    }

    /**
     * List Snapshot Formats
     */
    async listSnapshotFormatsRootserversRootServerIdSnapshotsDateFormatsGet(requestParameters: ListSnapshotFormatsRootserversRootServerIdSnapshotsDateFormatsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Format>> {
        const response = await this.listSnapshotFormatsRootserversRootServerIdSnapshotsDateFormatsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Snapshot Meetings
     */
    async listSnapshotMeetingsRootserversRootServerIdSnapshotsDateMeetingsGetRaw(requestParameters: ListSnapshotMeetingsRootserversRootServerIdSnapshotsDateMeetingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Meeting>>> {
        if (requestParameters.rootServerId === null || requestParameters.rootServerId === undefined) {
            throw new runtime.RequiredError('rootServerId','Required parameter requestParameters.rootServerId was null or undefined when calling listSnapshotMeetingsRootserversRootServerIdSnapshotsDateMeetingsGet.');
        }

        if (requestParameters.date === null || requestParameters.date === undefined) {
            throw new runtime.RequiredError('date','Required parameter requestParameters.date was null or undefined when calling listSnapshotMeetingsRootserversRootServerIdSnapshotsDateMeetingsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.serviceBodyBmltIds) {
            queryParameters['service_body_bmlt_ids'] = requestParameters.serviceBodyBmltIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/rootservers/{root_server_id}/snapshots/{date}/meetings`.replace(`{${"root_server_id"}}`, encodeURIComponent(String(requestParameters.rootServerId))).replace(`{${"date"}}`, encodeURIComponent(String(requestParameters.date))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MeetingFromJSON));
    }

    /**
     * List Snapshot Meetings
     */
    async listSnapshotMeetingsRootserversRootServerIdSnapshotsDateMeetingsGet(requestParameters: ListSnapshotMeetingsRootserversRootServerIdSnapshotsDateMeetingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Meeting>> {
        const response = await this.listSnapshotMeetingsRootserversRootServerIdSnapshotsDateMeetingsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Snapshot Service Bodies
     */
    async listSnapshotServiceBodiesRootserversRootServerIdSnapshotsDateServicebodiesGetRaw(requestParameters: ListSnapshotServiceBodiesRootserversRootServerIdSnapshotsDateServicebodiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceBody>>> {
        if (requestParameters.rootServerId === null || requestParameters.rootServerId === undefined) {
            throw new runtime.RequiredError('rootServerId','Required parameter requestParameters.rootServerId was null or undefined when calling listSnapshotServiceBodiesRootserversRootServerIdSnapshotsDateServicebodiesGet.');
        }

        if (requestParameters.date === null || requestParameters.date === undefined) {
            throw new runtime.RequiredError('date','Required parameter requestParameters.date was null or undefined when calling listSnapshotServiceBodiesRootserversRootServerIdSnapshotsDateServicebodiesGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/rootservers/{root_server_id}/snapshots/{date}/servicebodies`.replace(`{${"root_server_id"}}`, encodeURIComponent(String(requestParameters.rootServerId))).replace(`{${"date"}}`, encodeURIComponent(String(requestParameters.date))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceBodyFromJSON));
    }

    /**
     * List Snapshot Service Bodies
     */
    async listSnapshotServiceBodiesRootserversRootServerIdSnapshotsDateServicebodiesGet(requestParameters: ListSnapshotServiceBodiesRootserversRootServerIdSnapshotsDateServicebodiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceBody>> {
        const response = await this.listSnapshotServiceBodiesRootserversRootServerIdSnapshotsDateServicebodiesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Snapshots
     */
    async listSnapshotsSnapshotsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Snapshot>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/snapshots`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SnapshotFromJSON));
    }

    /**
     * List Snapshots
     */
    async listSnapshotsSnapshotsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Snapshot>> {
        const response = await this.listSnapshotsSnapshotsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Logout
     */
    async logoutLogoutPostRaw(requestParameters: LogoutLogoutPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.logout === null || requestParameters.logout === undefined) {
            throw new runtime.RequiredError('logout','Required parameter requestParameters.logout was null or undefined when calling logoutLogoutPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LogoutToJSON(requestParameters.logout),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Logout
     */
    async logoutLogoutPost(requestParameters: LogoutLogoutPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.logoutLogoutPostRaw(requestParameters, initOverrides);
    }

    /**
     * Update Root Server
     */
    async updateRootServerRootserversRootServerIdPatchRaw(requestParameters: UpdateRootServerRootserversRootServerIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.rootServerId === null || requestParameters.rootServerId === undefined) {
            throw new runtime.RequiredError('rootServerId','Required parameter requestParameters.rootServerId was null or undefined when calling updateRootServerRootserversRootServerIdPatch.');
        }

        if (requestParameters.rootServerUpdate === null || requestParameters.rootServerUpdate === undefined) {
            throw new runtime.RequiredError('rootServerUpdate','Required parameter requestParameters.rootServerUpdate was null or undefined when calling updateRootServerRootserversRootServerIdPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/rootservers/{root_server_id}`.replace(`{${"root_server_id"}}`, encodeURIComponent(String(requestParameters.rootServerId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RootServerUpdateToJSON(requestParameters.rootServerUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Root Server
     */
    async updateRootServerRootserversRootServerIdPatch(requestParameters: UpdateRootServerRootserversRootServerIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateRootServerRootserversRootServerIdPatchRaw(requestParameters, initOverrides);
    }

}
