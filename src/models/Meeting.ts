/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DayOfWeekEnum } from './DayOfWeekEnum';
import {
    DayOfWeekEnumFromJSON,
    DayOfWeekEnumFromJSONTyped,
    DayOfWeekEnumToJSON,
} from './DayOfWeekEnum';
import type { Format } from './Format';
import {
    FormatFromJSON,
    FormatFromJSONTyped,
    FormatToJSON,
} from './Format';
import type { ServiceBody } from './ServiceBody';
import {
    ServiceBodyFromJSON,
    ServiceBodyFromJSONTyped,
    ServiceBodyToJSON,
} from './ServiceBody';
import type { VenueTypeEnum } from './VenueTypeEnum';
import {
    VenueTypeEnumFromJSON,
    VenueTypeEnumFromJSONTyped,
    VenueTypeEnumToJSON,
} from './VenueTypeEnum';

/**
 * 
 * @export
 * @interface Meeting
 */
export interface Meeting {
    /**
     * 
     * @type {number}
     * @memberof Meeting
     */
    bmltId: number;
    /**
     * 
     * @type {string}
     * @memberof Meeting
     */
    name: string;
    /**
     * 
     * @type {DayOfWeekEnum}
     * @memberof Meeting
     */
    day: DayOfWeekEnum;
    /**
     * 
     * @type {number}
     * @memberof Meeting
     */
    serviceBodyBmltId: number;
    /**
     * 
     * @type {VenueTypeEnum}
     * @memberof Meeting
     */
    venueType: VenueTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Meeting
     */
    startTime: string;
    /**
     * 
     * @type {number}
     * @memberof Meeting
     */
    duration: number;
    /**
     * 
     * @type {string}
     * @memberof Meeting
     */
    timeZone: string;
    /**
     * 
     * @type {number}
     * @memberof Meeting
     */
    latitude: number;
    /**
     * 
     * @type {number}
     * @memberof Meeting
     */
    longitude: number;
    /**
     * 
     * @type {boolean}
     * @memberof Meeting
     */
    published: boolean;
    /**
     * 
     * @type {string}
     * @memberof Meeting
     */
    worldId: string;
    /**
     * 
     * @type {string}
     * @memberof Meeting
     */
    locationText: string;
    /**
     * 
     * @type {string}
     * @memberof Meeting
     */
    locationInfo: string;
    /**
     * 
     * @type {string}
     * @memberof Meeting
     */
    locationStreet: string;
    /**
     * 
     * @type {string}
     * @memberof Meeting
     */
    locationCitySubsection: string;
    /**
     * 
     * @type {string}
     * @memberof Meeting
     */
    locationNeighborhood: string;
    /**
     * 
     * @type {string}
     * @memberof Meeting
     */
    locationMunicipality: string;
    /**
     * 
     * @type {string}
     * @memberof Meeting
     */
    locationSubProvince: string;
    /**
     * 
     * @type {string}
     * @memberof Meeting
     */
    locationProvince: string;
    /**
     * 
     * @type {string}
     * @memberof Meeting
     */
    locationPostalCode1: string;
    /**
     * 
     * @type {string}
     * @memberof Meeting
     */
    locationNation: string;
    /**
     * 
     * @type {string}
     * @memberof Meeting
     */
    trainLines: string;
    /**
     * 
     * @type {string}
     * @memberof Meeting
     */
    busLines: string;
    /**
     * 
     * @type {string}
     * @memberof Meeting
     */
    comments: string;
    /**
     * 
     * @type {string}
     * @memberof Meeting
     */
    virtualMeetingLink: string;
    /**
     * 
     * @type {string}
     * @memberof Meeting
     */
    phoneMeetingNumber: string;
    /**
     * 
     * @type {string}
     * @memberof Meeting
     */
    virtualMeetingAdditionalInfo: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof Meeting
     */
    formatBmltIds: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof Meeting
     */
    nawsCodeOverride: string;
    /**
     * 
     * @type {ServiceBody}
     * @memberof Meeting
     */
    serviceBody: ServiceBody;
    /**
     * 
     * @type {Array<Format>}
     * @memberof Meeting
     */
    formats: Array<Format>;
    /**
     * 
     * @type {Date}
     * @memberof Meeting
     */
    lastChanged: Date;
}

/**
 * Check if a given object implements the Meeting interface.
 */
export function instanceOfMeeting(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "bmltId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "day" in value;
    isInstance = isInstance && "serviceBodyBmltId" in value;
    isInstance = isInstance && "venueType" in value;
    isInstance = isInstance && "startTime" in value;
    isInstance = isInstance && "duration" in value;
    isInstance = isInstance && "timeZone" in value;
    isInstance = isInstance && "latitude" in value;
    isInstance = isInstance && "longitude" in value;
    isInstance = isInstance && "published" in value;
    isInstance = isInstance && "worldId" in value;
    isInstance = isInstance && "locationText" in value;
    isInstance = isInstance && "locationInfo" in value;
    isInstance = isInstance && "locationStreet" in value;
    isInstance = isInstance && "locationCitySubsection" in value;
    isInstance = isInstance && "locationNeighborhood" in value;
    isInstance = isInstance && "locationMunicipality" in value;
    isInstance = isInstance && "locationSubProvince" in value;
    isInstance = isInstance && "locationProvince" in value;
    isInstance = isInstance && "locationPostalCode1" in value;
    isInstance = isInstance && "locationNation" in value;
    isInstance = isInstance && "trainLines" in value;
    isInstance = isInstance && "busLines" in value;
    isInstance = isInstance && "comments" in value;
    isInstance = isInstance && "virtualMeetingLink" in value;
    isInstance = isInstance && "phoneMeetingNumber" in value;
    isInstance = isInstance && "virtualMeetingAdditionalInfo" in value;
    isInstance = isInstance && "formatBmltIds" in value;
    isInstance = isInstance && "nawsCodeOverride" in value;
    isInstance = isInstance && "serviceBody" in value;
    isInstance = isInstance && "formats" in value;
    isInstance = isInstance && "lastChanged" in value;

    return isInstance;
}

export function MeetingFromJSON(json: any): Meeting {
    return MeetingFromJSONTyped(json, false);
}

export function MeetingFromJSONTyped(json: any, ignoreDiscriminator: boolean): Meeting {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bmltId': json['bmlt_id'],
        'name': json['name'],
        'day': DayOfWeekEnumFromJSON(json['day']),
        'serviceBodyBmltId': json['service_body_bmlt_id'],
        'venueType': VenueTypeEnumFromJSON(json['venue_type']),
        'startTime': json['start_time'],
        'duration': json['duration'],
        'timeZone': json['time_zone'],
        'latitude': json['latitude'],
        'longitude': json['longitude'],
        'published': json['published'],
        'worldId': json['world_id'],
        'locationText': json['location_text'],
        'locationInfo': json['location_info'],
        'locationStreet': json['location_street'],
        'locationCitySubsection': json['location_city_subsection'],
        'locationNeighborhood': json['location_neighborhood'],
        'locationMunicipality': json['location_municipality'],
        'locationSubProvince': json['location_sub_province'],
        'locationProvince': json['location_province'],
        'locationPostalCode1': json['location_postal_code_1'],
        'locationNation': json['location_nation'],
        'trainLines': json['train_lines'],
        'busLines': json['bus_lines'],
        'comments': json['comments'],
        'virtualMeetingLink': json['virtual_meeting_link'],
        'phoneMeetingNumber': json['phone_meeting_number'],
        'virtualMeetingAdditionalInfo': json['virtual_meeting_additional_info'],
        'formatBmltIds': json['format_bmlt_ids'],
        'nawsCodeOverride': json['naws_code_override'],
        'serviceBody': ServiceBodyFromJSON(json['service_body']),
        'formats': ((json['formats'] as Array<any>).map(FormatFromJSON)),
        'lastChanged': (new Date(json['last_changed'])),
    };
}

export function MeetingToJSON(value?: Meeting | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bmlt_id': value.bmltId,
        'name': value.name,
        'day': DayOfWeekEnumToJSON(value.day),
        'service_body_bmlt_id': value.serviceBodyBmltId,
        'venue_type': VenueTypeEnumToJSON(value.venueType),
        'start_time': value.startTime,
        'duration': value.duration,
        'time_zone': value.timeZone,
        'latitude': value.latitude,
        'longitude': value.longitude,
        'published': value.published,
        'world_id': value.worldId,
        'location_text': value.locationText,
        'location_info': value.locationInfo,
        'location_street': value.locationStreet,
        'location_city_subsection': value.locationCitySubsection,
        'location_neighborhood': value.locationNeighborhood,
        'location_municipality': value.locationMunicipality,
        'location_sub_province': value.locationSubProvince,
        'location_province': value.locationProvince,
        'location_postal_code_1': value.locationPostalCode1,
        'location_nation': value.locationNation,
        'train_lines': value.trainLines,
        'bus_lines': value.busLines,
        'comments': value.comments,
        'virtual_meeting_link': value.virtualMeetingLink,
        'phone_meeting_number': value.phoneMeetingNumber,
        'virtual_meeting_additional_info': value.virtualMeetingAdditionalInfo,
        'format_bmlt_ids': value.formatBmltIds,
        'naws_code_override': value.nawsCodeOverride,
        'service_body': ServiceBodyToJSON(value.serviceBody),
        'formats': ((value.formats as Array<any>).map(FormatToJSON)),
        'last_changed': (value.lastChanged.toISOString().substr(0,10)),
    };
}

