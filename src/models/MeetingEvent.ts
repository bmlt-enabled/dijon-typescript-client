/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Meeting } from './Meeting';
import {
    MeetingFromJSON,
    MeetingFromJSONTyped,
    MeetingToJSON,
} from './Meeting';
import type { MeetingEventType } from './MeetingEventType';
import {
    MeetingEventTypeFromJSON,
    MeetingEventTypeFromJSONTyped,
    MeetingEventTypeToJSON,
} from './MeetingEventType';

/**
 * 
 * @export
 * @interface MeetingEvent
 */
export interface MeetingEvent {
    /**
     * 
     * @type {MeetingEventType}
     * @memberof MeetingEvent
     */
    eventType: MeetingEventType;
    /**
     * 
     * @type {Meeting}
     * @memberof MeetingEvent
     */
    oldMeeting: Meeting;
    /**
     * 
     * @type {Meeting}
     * @memberof MeetingEvent
     */
    newMeeting: Meeting;
    /**
     * 
     * @type {Array<string>}
     * @memberof MeetingEvent
     */
    changedFields: Array<string>;
}

/**
 * Check if a given object implements the MeetingEvent interface.
 */
export function instanceOfMeetingEvent(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "eventType" in value;
    isInstance = isInstance && "oldMeeting" in value;
    isInstance = isInstance && "newMeeting" in value;
    isInstance = isInstance && "changedFields" in value;

    return isInstance;
}

export function MeetingEventFromJSON(json: any): MeetingEvent {
    return MeetingEventFromJSONTyped(json, false);
}

export function MeetingEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): MeetingEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'eventType': MeetingEventTypeFromJSON(json['event_type']),
        'oldMeeting': MeetingFromJSON(json['old_meeting']),
        'newMeeting': MeetingFromJSON(json['new_meeting']),
        'changedFields': json['changed_fields'],
    };
}

export function MeetingEventToJSON(value?: MeetingEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'event_type': MeetingEventTypeToJSON(value.eventType),
        'old_meeting': MeetingToJSON(value.oldMeeting),
        'new_meeting': MeetingToJSON(value.newMeeting),
        'changed_fields': value.changedFields,
    };
}

